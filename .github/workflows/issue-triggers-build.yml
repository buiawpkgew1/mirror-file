name: Issue triggers publish release package

on:
  issues:
    types: [opened]

env:
  OUTPUT_BRANCH: main  # 请注意是否存在分支
  FILES_LIST_DIR: dist
  FILES_LIST: files-list.md

jobs:
  download_to_publish:
    name: Download file then publish release package
    runs-on: ubuntu-latest

    outputs:
      FILE_NAME: ${{ steps.getIssueInfo.outputs.FILE_NAME }}
      FILE_URL: ${{ steps.getIssueInfo.outputs.FILE_URL }}
      FILE_HASH: ${{ steps.generateHash.outputs.FILE_HASH }}
      IS_FILE_IN: ${{ steps.generateHash.outputs.IS_FILE_IN }}
      browser_download_url: ${{ steps.publishRelease.outputs.browser_download_url }}
      SUCCESS: ${{ steps.successCheck.outputs.SUCCESS }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ env.OUTPUT_BRANCH }}
          fetch-depth: 1

      - name: Get issue info
        id: getIssueInfo
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');

            // comment 显示构建进展链接
            const issues_body = `构建进展，详见 [构建任务](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${{github.run_id}})`
            const issuesComment = await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: issues_body
            });
            console.log("Create issues comment resp:", issuesComment["status"]);

            // 使用 title 获取下载链接
            const title = context?.payload?.issue?.title?.trim() || '';

            const url = title;
            const pos = url.lastIndexOf("/");
            if(pos == -1){
              pos = url.lastIndexOf("\\");
            }
            const url_filename = url.substr(pos +1);

            // 使用 body 获取文件名
            const body = context?.payload?.issue?.body?.trim() || '';

            let filename;
            if (body.length > 0) {
              filename = body;
            } else {
              filename = url_filename;
            }

            core.setOutput('FILE_NAME', filename);
            console.log("The file name is", filename);
            core.setOutput('FILE_URL', url);
            console.log("The file url is", url);

      - name: Download file from url
        uses: carlosperate/download-file-action@v2
        id: downloadFile
        with:
          file-url: ${{ steps.getIssueInfo.outputs.FILE_URL }}
          file-name: ${{ steps.getIssueInfo.outputs.FILE_NAME }}
          location: './'
          # md5: ''
          # sha256: ''

      # 用于判断列表文件是否更新
      - name: Generate hash value
        id: generateHash
        env:
          file_hash: ${{ hashFiles(steps.getIssueInfo.outputs.FILE_NAME) }}
        run: |
          echo "FILE_HASH=${file_hash}" >> $GITHUB_OUTPUT
          grep "${file_hash}" "${FILES_LIST}" >/dev/null && IS_FILE_IN=true || IS_FILE_IN=false
          echo "IS_FILE_IN=$IS_FILE_IN" >> $GITHUB_OUTPUT

      - name: Tar package
        if: ${{ steps.generateHash.outputs.IS_FILE_IN == 'false' }}
        run: |
          tar -czvf ${{ steps.getIssueInfo.outputs.FILE_NAME }}.tar.gz ${{ steps.getIssueInfo.outputs.FILE_NAME }}

      - name: Publish to release package
        id: publishRelease
        if: ${{ steps.generateHash.outputs.IS_FILE_IN == 'false' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.getIssueInfo.outputs.FILE_NAME }}.tar.gz
          asset_name: ${{ steps.getIssueInfo.outputs.FILE_NAME }}.tar.gz
          tag: ${{ github.ref }}
          overwrite: true
          release_name: Download file list
          body: "文件列表：https://github.com//${GITHUB_REPOSITORY}/blob/${OUTPUT_BRANCH}/${FILES_LIST}"

      - name: Success check
        id: successCheck
        uses: actions/github-script@v6
        if: ${{ success() }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            core.setOutput('SUCCESS', true)

      - name: Update files list
        id: updateFilesList
        if: ${{ steps.successCheck.outputs.SUCCESS == 'true' }}
        run: |
          echo -e "[${{ steps.getIssueInfo.outputs.FILE_NAME }}.tar.gz](${{ steps.publishRelease.outputs.browser_download_url }}) ${{ steps.generateHash.outputs.FILE_HASH }} [${{ steps.getIssueInfo.outputs.FILE_NAME }}](${{ steps.getIssueInfo.outputs.FILE_URL }})    \n" >> ${FILES_LIST_DIR}/${FILES_LIST}

      - name: Push files list
        uses: crazy-max/ghaction-github-pages@v3
        with:
          target_branch: ${{ env.OUTPUT_BRANCH }}
          build_dir: ${{ env.FILES_LIST_DIR }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Close issues
        id: closeIssues
        uses: actions/github-script@v6
        if: ${{ always() }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            // 更新 release
            const file_name = "${{ steps.getIssueInfo.outputs.FILE_NAME }}";
            const file_url = "${{ steps.getIssueInfo.outputs.FILE_URL }}";
            const release_id = "${{ steps.getIssueInfo.outputs.RELEASE_ID }}";
            const file_hash = "${{ steps.generateHash.outputs.FILE_HASH }}";
            const is_contains = "${{ steps.generateHash.outputs.IS_CONTAINS }}";

            // 关闭 issues
            const issuesResponse = await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              state: "closed"
            });
            console.log("Update issues resp:", issuesResponse["status"] == 200 ? "success" : "failed" );

            // 设置 labels body 变量
            let labels = [];
            let body = `构建失败，详见 [构建任务](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${{github.run_id}})`;
            const success = String(${{ steps.successCheck.outputs.SUCCESS }}).toLowerCase() == "true";
            console.log("Is success?", success);

            if(success){
              body = `构建完成，您可以点击下载 <br/>\n[${{ steps.getIssueInfo.outputs.FILE_NAME }}](${{ steps.publishRelease.outputs.browser_download_url }})`;
              labels = ['success'];
            }else{
              const jobsResponse = await github.request('GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs', {
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: ${{ github.run_id }}
              });
              console.log("Jobs",jobsResponse['data']);

              body += "\n\n 日志:\n\n";
              for(let job of jobsResponse['data']['jobs']){
                  body += "- ["+job.name+"]("+job.html_url+")";
              }
              labels = ['failure'];
            }

            // 创建回复
            const issuesComment = await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
            });
            console.log("Create issues comment resp:", issuesComment["status"] == 201 ? "success" : "failed" );

            // 标签
            if(labels){
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: labels
              });
            }
